{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\nimport Firebase from \"../../firebase_settings/index.js\";\nimport iidxRadarJson from '../../assets/iidxRadar.json';\nconst db = Firebase.db;\nexport default {\n  data() {\n    return {\n      iidxRadarScore: iidxRadarJson\n    };\n  },\n  calc_radarScore(diff, userData, radarData) {\n    var maxScore = radarData[diff][\"ノート数\"] * 2;\n    delete radarData[\"ノート数\"];\n    Object.entries(radarData[diff]).forEach(([key, value]) => {\n      radarData[diff][key] = value * (userData[diff] / maxScore);\n    });\n    return radarData[diff];\n  },\n  receive_radarData() {\n    this.iidxRadarScore = iidxRadarJson;\n  },\n  receive_userData(uid) {\n    console.log('Document exist!');\n    const docRef = doc(db, 'userData', uid);\n    getDoc(docRef).then(documentSnapshot => {\n      if (documentSnapshot.exists()) {\n        console.log('Document exist!');\n        var temp_userData = documentSnapshot.data();\n        var temp_returnData = [];\n        for (let key in temp_userData) {\n          var temp_RadarData = this.iidxRadarScore[temp_userData[key][\"TITLE\"]];\n          if (temp_RadarData != undefined) {\n            //曲名があるか\n            for (let diff in temp_RadarData) {\n              var temp = this.calc_radarScore(diff, temp_userData[key], temp_RadarData);\n              temp_returnData.push({\n                \"TITLE\": temp_userData[key][\"TITLE\"],\n                \"artist\": temp_userData[key][\"TITLE\"],\n                \"radarScore\": temp\n              });\n            }\n          }\n        }\n        console.log(temp_returnData);\n        return temp_returnData;\n      } else {\n        console.log('Document does not exist!');\n      }\n    });\n  },\n  send_userData(data, uid) {\n    const docRef = doc(db, 'userData', uid);\n    getDoc(docRef).then(documentSnapshot => {\n      if (documentSnapshot.exists()) {\n        updateDoc(docRef, data).then(() => {\n          console.log(\"Document successfully update!\");\n        }).catch(error => {\n          console.error(\"Error writing document: \", error);\n        });\n      } else {\n        setDoc(docRef, data).then(() => {\n          console.log(\"Document successfully written!\");\n        }).catch(error => {\n          console.error(\"Error writing document: \", error);\n        });\n      }\n    });\n  }\n};","map":{"version":3,"names":["doc","getDoc","setDoc","updateDoc","Firebase","iidxRadarJson","db","data","iidxRadarScore","calc_radarScore","diff","userData","radarData","maxScore","Object","entries","forEach","key","value","receive_radarData","receive_userData","uid","console","log","docRef","then","documentSnapshot","exists","temp_userData","temp_returnData","temp_RadarData","undefined","temp","push","send_userData","catch","error"],"sources":["C:/Users/taich/Documents/GitHub/home/src/components/iidxradarparts/calcRadarScore.js"],"sourcesContent":["import { doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\r\nimport Firebase from \"../../firebase_settings/index.js\";\r\nimport iidxRadarJson from '../../assets/iidxRadar.json';\r\n\r\nconst db = Firebase.db;\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            iidxRadarScore: iidxRadarJson,\r\n        }\r\n    },\r\n\r\n    calc_radarScore(diff, userData, radarData) {\r\n        var maxScore = radarData[diff][\"ノート数\"] * 2;\r\n        delete radarData[\"ノート数\"];\r\n        Object.entries(radarData[diff]).forEach(([key, value]) => {\r\n            radarData[diff][key] = value * (userData[diff] / maxScore)\r\n        })\r\n        return radarData[diff]\r\n    },\r\n\r\n    receive_radarData() {\r\n        this.iidxRadarScore = iidxRadarJson;\r\n    },\r\n\r\n    receive_userData(uid) {\r\n        console.log('Document exist!');\r\n        const docRef = doc(db, 'userData', uid);\r\n        getDoc(docRef).then((documentSnapshot) => {\r\n            if (documentSnapshot.exists()) {\r\n                console.log('Document exist!');\r\n                var temp_userData = documentSnapshot.data()\r\n                var temp_returnData = []\r\n                for (let key in temp_userData) {\r\n                    var temp_RadarData = this.iidxRadarScore[temp_userData[key][\"TITLE\"]]\r\n                    if (temp_RadarData != undefined) { //曲名があるか\r\n                        for (let diff in temp_RadarData) {\r\n                            var temp = this.calc_radarScore(diff, temp_userData[key], temp_RadarData)\r\n                            temp_returnData.push(\r\n                                {\r\n                                    \"TITLE\": temp_userData[key][\"TITLE\"],\r\n                                    \"artist\": temp_userData[key][\"TITLE\"],\r\n                                    \"radarScore\": temp\r\n                                })\r\n                        }\r\n                    }\r\n                }\r\n                console.log(temp_returnData)\r\n                return temp_returnData\r\n            } else {\r\n                console.log('Document does not exist!');\r\n            }\r\n        });\r\n    },\r\n\r\n    send_userData(data, uid) {\r\n        const docRef = doc(db, 'userData', uid);\r\n        getDoc(docRef).then((documentSnapshot) => {\r\n            if (documentSnapshot.exists()) {\r\n                updateDoc(docRef, data)\r\n                    .then(() => {\r\n                        console.log(\"Document successfully update!\");\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(\"Error writing document: \", error);\r\n                    });\r\n            } else {\r\n                setDoc(docRef, data)\r\n                    .then(() => {\r\n                        console.log(\"Document successfully written!\");\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(\"Error writing document: \", error);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}