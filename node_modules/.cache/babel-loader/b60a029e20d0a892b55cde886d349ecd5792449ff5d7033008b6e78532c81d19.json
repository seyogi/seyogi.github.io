{"ast":null,"code":"import { doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\nimport Firebase from \"../../firebase_settings/index.js\";\nimport iidxRadarJson from '../../assets/iidxRadar.json';\nconst db = Firebase.db;\nexport default {\n  data() {\n    return {\n      iidxRadarScore: iidxRadarJson\n    };\n  },\n  receive_radarData() {\n    console.log(iidxRadarScore);\n    /*const usersCollectionRef = collection(db, 'iidxRadarData');\r\n    getDocs(usersCollectionRef).then((documentSnapshot) => {\r\n        var tempDict = {};\r\n        documentSnapshot.docs.forEach((doc) => {\r\n            tempDict[doc.data()[\"TITLE\"]]=doc.data();\r\n        });\r\n        return tempDict;\r\n    });*/\n  },\n\n  receive_userData(uid) {\n    const docRef = doc(db, 'userData', uid);\n    getDoc(docRef).then(documentSnapshot => {\n      if (documentSnapshot.exists()) {\n        console.log('Document data:', documentSnapshot.data());\n      } else {\n        console.log('Document does not exist!');\n      }\n    });\n  },\n  send_userData(data, uid) {\n    const docRef = doc(db, 'userData', uid);\n    getDoc(docRef).then(documentSnapshot => {\n      if (documentSnapshot.exists()) {\n        updateDoc(docRef, data).then(() => {\n          console.log(\"Document successfully update!\");\n        }).catch(error => {\n          console.error(\"Error writing document: \", error);\n        });\n      } else {\n        setDoc(docRef, data).then(() => {\n          console.log(\"Document successfully written!\");\n        }).catch(error => {\n          console.error(\"Error writing document: \", error);\n        });\n      }\n    });\n  }\n};","map":{"version":3,"names":["doc","getDoc","setDoc","updateDoc","Firebase","iidxRadarJson","db","data","iidxRadarScore","receive_radarData","console","log","receive_userData","uid","docRef","then","documentSnapshot","exists","send_userData","catch","error"],"sources":["C:/Users/taich/Documents/GitHub/home/src/components/iidxradarparts/calcRadarScore.js"],"sourcesContent":["import { doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\r\nimport Firebase from \"../../firebase_settings/index.js\";\r\nimport iidxRadarJson from '../../assets/iidxRadar.json';\r\n\r\nconst db = Firebase.db;\r\n\r\nexport default {\r\n    data() {\r\n        return { iidxRadarScore: iidxRadarJson, }\r\n    },\r\n    receive_radarData() {\r\n        console.log(iidxRadarScore)\r\n        /*const usersCollectionRef = collection(db, 'iidxRadarData');\r\n        getDocs(usersCollectionRef).then((documentSnapshot) => {\r\n            var tempDict = {};\r\n            documentSnapshot.docs.forEach((doc) => {\r\n                tempDict[doc.data()[\"TITLE\"]]=doc.data();\r\n            });\r\n            return tempDict;\r\n        });*/\r\n    },\r\n\r\n    receive_userData(uid) {\r\n        const docRef = doc(db, 'userData', uid);\r\n        getDoc(docRef).then((documentSnapshot) => {\r\n            if (documentSnapshot.exists()) {\r\n                console.log('Document data:', documentSnapshot.data());\r\n            } else {\r\n                console.log('Document does not exist!');\r\n            }\r\n        });\r\n    },\r\n\r\n    send_userData(data, uid) {\r\n        const docRef = doc(db, 'userData', uid);\r\n        getDoc(docRef).then((documentSnapshot) => {\r\n            if (documentSnapshot.exists()) {\r\n                updateDoc(docRef, data)\r\n                    .then(() => {\r\n                        console.log(\"Document successfully update!\");\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(\"Error writing document: \", error);\r\n                    });\r\n            } else {\r\n                setDoc(docRef, data)\r\n                    .then(() => {\r\n                        console.log(\"Document successfully written!\");\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(\"Error writing document: \", error);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,QAAQ,oBAAoB;AACnE,OAAOC,QAAQ,MAAM,kCAAkC;AACvD,OAAOC,aAAa,MAAM,6BAA6B;AAEvD,MAAMC,EAAE,GAAGF,QAAQ,CAACE,EAAE;AAEtB,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MAAEC,cAAc,EAAEH;IAAe,CAAC;EAC7C,CAAC;EACDI,iBAAiBA,CAAA,EAAG;IAChBC,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;IAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;;EAEDI,gBAAgBA,CAACC,GAAG,EAAE;IAClB,MAAMC,MAAM,GAAGd,GAAG,CAACM,EAAE,EAAE,UAAU,EAAEO,GAAG,CAAC;IACvCZ,MAAM,CAACa,MAAM,CAAC,CAACC,IAAI,CAAEC,gBAAgB,IAAK;MACtC,IAAIA,gBAAgB,CAACC,MAAM,EAAE,EAAE;QAC3BP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEK,gBAAgB,CAACT,IAAI,EAAE,CAAC;MAC1D,CAAC,MAAM;QACHG,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAC3C;IACJ,CAAC,CAAC;EACN,CAAC;EAEDO,aAAaA,CAACX,IAAI,EAAEM,GAAG,EAAE;IACrB,MAAMC,MAAM,GAAGd,GAAG,CAACM,EAAE,EAAE,UAAU,EAAEO,GAAG,CAAC;IACvCZ,MAAM,CAACa,MAAM,CAAC,CAACC,IAAI,CAAEC,gBAAgB,IAAK;MACtC,IAAIA,gBAAgB,CAACC,MAAM,EAAE,EAAE;QAC3Bd,SAAS,CAACW,MAAM,EAAEP,IAAI,CAAC,CAClBQ,IAAI,CAAC,MAAM;UACRL,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAChD,CAAC,CAAC,CACDQ,KAAK,CAAEC,KAAK,IAAK;UACdV,OAAO,CAACU,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QACpD,CAAC,CAAC;MACV,CAAC,MAAM;QACHlB,MAAM,CAACY,MAAM,EAAEP,IAAI,CAAC,CACfQ,IAAI,CAAC,MAAM;UACRL,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QACjD,CAAC,CAAC,CACDQ,KAAK,CAAEC,KAAK,IAAK;UACdV,OAAO,CAACU,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QACpD,CAAC,CAAC;MACV;IACJ,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}